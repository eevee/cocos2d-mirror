Writing a Cocos application
===========================

Getting started with a new library or framework can be daunting, especially
when presented with a large amount of reference material to read.  This
chapter gives a very quick introduction to cocos without covering any of the
details.

.. contents::
    :local:

Hello, World
------------

We'll begin with the requisite "Hello, World" introduction.  This program will
open a window with some text in it and wait to be closed.  You can find the
entire program in the `samples/hello_world.py` file.

.. image:: hello_world.py.png


Begin by importing the cocos package::

    import cocos

Subclass a `Layer`  and define the logic of you program here::

    class HelloWorld(cocos.layer.Layer):

Always call ``super`` in the constructor::

    def __init__(self):
        super( HelloWorld, self ).__init__()

To display the text, we'll create a `Label`.  Keyword arguments are used
to set the font, position and alignment of the label::

    label = cocos.text.Label('Hello, world', 
                              font_name='Times New Roman', 
                              font_size=36,
                              x=100, y=320,
                              halign='center', valign='center')

Since `Label` is a subclass of `CocosNode` it can be added
as a child. All `CocosNode` objects know how to render itself, perform actions
and transformations.
To add it as a layer's child, use the `CocosNode.add` method::
 
        self.add( label )

After defining the ``HelloWorld`` class, we need to initialize and create a window.
To do this, we initialize the `Director`::

    cocos.director.director.init()

Then we create a ``HelloWorld`` instance::

    hello_layer = HelloWorld ()

Then we create an `Scene` that contains the ``HelloWorld`` layer as a child::

    main_scene = cocos.scene.Scene (hello_layer)

And finally we run the scene::

    cocos.director.director.run (main_scene)

A shorter way to write the last 3 statements is this::

    #cocos.director.director.run( cocos.scene.Scene( HelloWorld() ) )


Another Example #2
------------------

FIXME: add example #2


Another Example #3
------------------

FIXME: add example #3



Where to next?
--------------

The examples presented in this chapter should have given you enough
information to get started writing simple arcade and point-and-click-based
games.

The remainder of this programming guide goes into quite technical detail
regarding some of cocos's features.  While getting started, it's recommended
that you skim the beginning of each chapter but not attempt to read through
the entire guide from start to finish.

To achieve optimal performance in your 2D
applications you'll need to work with OpenGL directly.  The canonical
references for OpenGL are `The OpenGL Programming Guide`_ and 
`The OpenGL Shading Language`_.

There are numerous examples of cocos applications in the ``samples/``
directory of the documentation and source distributions.  Keep checking
http://www.cocos2d.org/ for more examples and tutorials as they are written.

.. _The OpenGL Programming Guide: http://opengl.org/documentation/books/#the_opengl_programming_guide_the_official_guide_to_learning_opengl_version
.. _The OpenGL Shading Language: http://opengl.org/documentation/books/#the_opengl_shading_language_2nd_edition
