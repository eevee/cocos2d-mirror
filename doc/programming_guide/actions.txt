Actions, Transformations and Effects
====================================

.. contents::
	:local:
	
Actions
-------

Actions are like orders given to any `CocosNode` object.
These actions usually modify some the object's attributes like `position`,
`rotation`, `scale`, etc. If these attributes are modified during a period of time,
they are `IntervalAction` actions, otherwise they are `InstantAction` actions.

For example, the `MoveBy` actions modifies the `position` attribute during a period
of time, hence, it is an `IntervalAction`.

Example::

	# Move a sprite 50 pixels to the right, and 100 pixel to the top in 2 seconds.
	sprite.do( MoveBy( (50,100), duration=2 ) )
	
`InvertalAction` has some interesting properties:

	- The can be accelerated using the time-altered actions
		- `Accelerate`
		- `AccelDeccel`
		- `Speed`
	- They can be executed backwards in time with the `ReverseTime` action.
	  The starting point will be ending point, and vice-versa.
	- All the relative actions (the ones ending in 'By') have a `Reverse` action
	  that executes the action in the opposite direction.



Basic actions
-------------

Basic actions are the ones that modifies basic attributes like:

 - position
	- `MoveBy`
	- `MoveTo`
	- `JumpBy`
	- `JumpTo`
	- `Bezier`
	- `Place`

 - scale
 	- `ScaleBy`
 	- `ScaleTo`

 - rotation
 	- `RotateBy`
 	- `RotateTo`

 - visible
 	- `Show`
 	- `Hide`
 	- `Blink`
 	- `ToggleVisibility`

 - opacity
 	- `FadeIn`
 	- `FadeOut`
 	- `FadeTo`
 	

Example::

	XXX: finish this part
  

Effects
-------

There are 2 kind of grids: ``tiled`` grids and ``non-tiled`` grids. The difference is that
the ``tiled`` grid is composed of individual tiles while the ``non-tiled`` grid is
composed of vertex.

.. image:: tiled_and_nontiled_grid.png

The grids has 2 dimensions: ``rows`` and ``columns``, but each vertex of the grid has
3 dimension: ``x``, ``y`` and ``z``. So you can create 2d or 3d effects by transforming
a ``tiled-grid-3D`` or a ``grid-3D`` grid.


How they work
^^^^^^^^^^^^^

Each frame the screen is rendered into a texture. This texture is transformed into a ``vertex array``
and this ``vertex array`` (the grid!) is transformed by the grid effects.
Finally the ``vertex array`` is rendered into the screen.

For more information about the internals refer to:
 - `TiledGrid3D` and `TiledGrid3DAction` for ``tiled`` grids
 - `Grid3D` and `Grid3DAction` for ``non-tiled`` grids


Index of grid effects
^^^^^^^^^^^^^^^^^^^^^

 - TiledGrid3D actions
	- `ShatteredTiles3D`
	- `ShakyTiles3D`
 	- `JumpTiles3D`
 	- `WavesTiles3D`
	- `ShuffleTiles`
 	- `TurnOffTiles`
 	- `FadeOutTiles`

 - Grid3D actions
 	- `Lens3D`
 	- `FlipX3D`
 	- `FlipY3D`
 	- `Waves3D`
 	- `Shaky3D`
	- `Liquid`
 	- `Waves`
	- `Twirl`
 	- `QuadMoveBy`
 	- `Flip`
 	- `FlipX`
 	- `FlipY`
 	- `SkewHorizontal`
 	- `SkewVertical`
 	- `MoveCornerUp`
 	- `MoveCornerDown`
 	- `CornerSwap`


Example::
	
	scene.do( Twirl( grid=(16,12), duration=4) )
	layer1.do( Lens3D( grid=(32,24), duration=5 )
	layer2.do( Waves( grid=(16,12), duration=4) + Liquid( grid=(16,12), duration=5 ) )
	

Composition
-----------

 - `Sequence`
 - `Spawn`
 - `Repeat`
 
Example::

	XXX: finish this part

	
Modifiers
---------

 - Time modifiers
	- `Accelerate`
	- `AccelDeccel`
	- `Speed`
	- `Reverse`
	- `ReverseTime`

 - Amplitude modifiers
	- `AccelAmplitude`
	- `AccelDeccelAmplitude`
   
Exmaple::
	
	XXX: finish this part
	

Special Actions
---------------

  - `Delay`
  - `RandomDelay`
  - `CallFunc`
  - `CallFuncS`
  - `DoAction`
  - `StopGrid`
  - `ReuseGrid`
  - `OrbitCamera`
 
 Example::
 
 	XXX: finish this part
 	